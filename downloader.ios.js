"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var downloader_common_1 = require("./downloader.common");
var fs = require("tns-core-modules/file-system");
var main_queue = dispatch_get_current_queue();
// declare const AFURLSessionManager, NSURLSessionConfiguration, NSURLRequest;
var Downloader = /** @class */ (function (_super) {
    __extends(Downloader, _super);
    function Downloader() {
        var _this = _super.call(this) || this;
        _this.downloads = new Map();
        _this.downloadsData = new Map();
        return _this;
    }
    Downloader.init = function () { };
    Downloader.prototype.createDownload = function (options) {
        if (options && !options.url)
            throw new Error('Url missing');
        var id = downloader_common_1.generateId();
        var configuration = NSURLSessionConfiguration.defaultSessionConfiguration;
        var download = AFURLSessionManager.alloc().initWithSessionConfiguration(configuration);
        var url;
        var query;
        if (options.query) {
            if (typeof options.query === 'object') {
                var keysArray = Object.keys(options.query);
                query = '';
                for (var _i = 0, keysArray_1 = keysArray; _i < keysArray_1.length; _i++) {
                    var key = keysArray_1[_i];
                    query += key + '=' + options.query[key] + '&';
                }
            }
            else if (typeof options.query === 'string') {
                query = options.query;
            }
            url = encodeURI(options.url + query);
        }
        else {
            url = options.url;
        }
        var request = NSURLRequest.requestWithURL(NSURL.URLWithString(url));
        var path = '';
        if (options.path && options.fileName) {
            path = fs.path.join(options.path, options.fileName);
        }
        else if (!options.path && options.fileName) {
            path = fs.path.join(fs.knownFolders.temp().path, options.fileName);
        }
        else if (options.path && !options.fileName) {
            path = fs.path.join(options.path, "" + downloader_common_1.generateId());
        }
        else {
            path = fs.path.join(fs.knownFolders.temp().path, "" + downloader_common_1.generateId());
        }
        var ref = new WeakRef(this);
        var lastRefreshTime = 0;
        var lastBytesWritten = 0;
        var task = download.downloadTaskWithRequestProgressDestinationCompletionHandler(request, function (progress) {
            dispatch_async(main_queue, function () {
                var owner = ref.get();
                if (task && task.state === 0 /* Running */) {
                    var current = Math.floor(Math.round(progress.fractionCompleted * 100));
                    if (owner.downloadsData.has(id)) {
                        var data = owner.downloadsData.get(id);
                        if (data) {
                            if (data.status && data.status !== downloader_common_1.StatusCode.DOWNLOADING) {
                                owner.downloadsData.set(id, Object.assign({}, data, {
                                    status: downloader_common_1.StatusCode.DOWNLOADING
                                }));
                            }
                        }
                        var callback = data.callback;
                        var speed = void 0;
                        var currentBytes = task.countOfBytesReceived;
                        var totalBytes = progress.totalUnitCount;
                        var currentTime = Date.now();
                        var minTime = 100;
                        if (currentTime - lastRefreshTime >= minTime ||
                            currentBytes === totalBytes) {
                            var intervalTime = currentTime - lastRefreshTime;
                            if (intervalTime === 0) {
                                intervalTime += 1;
                            }
                            var updateBytes = currentBytes - lastBytesWritten;
                            speed = Math.floor(Math.round(updateBytes / intervalTime));
                            if (callback && typeof callback === 'function') {
                                callback({
                                    value: current,
                                    speed: speed,
                                    currentSize: currentBytes,
                                    totalSize: progress.totalUnitCount
                                });
                            }
                            lastRefreshTime = Date.now();
                            lastBytesWritten = currentBytes;
                        }
                    }
                }
                else if (task.state === 1 /* Suspended */) {
                    var data = owner.downloadsData.get(id);
                    if (data) {
                        owner.downloadsData.set(id, Object.assign({}, data, {
                            status: downloader_common_1.StatusCode.PAUSED
                        }));
                    }
                }
            });
        }, function (targetPath, response) {
            var owner = ref.get();
            return NSURL.fileURLWithPath(path);
        }, function (response, filePath, error) {
            var owner = ref.get();
            if (error) {
                if (owner.downloadsData.has(id)) {
                    var data = owner.downloadsData.get(id);
                    var reject = data.reject;
                    reject({
                        status: downloader_common_1.StatusCode.ERROR,
                        message: error.localizedDescription
                    });
                }
            }
            else {
                if (task &&
                    task.state === 3 /* Completed */ &&
                    !task.error) {
                    if (owner.downloadsData.has(id)) {
                        var data = owner.downloadsData.get(id);
                        var resolve = data.resolve;
                        resolve({
                            status: downloader_common_1.StatusCode.COMPLETED,
                            message: null,
                            path: data.path
                        });
                    }
                }
            }
        });
        this.downloads.set(id, task);
        this.downloadsData.set(id, {
            status: downloader_common_1.StatusCode.PENDING,
            path: path
        });
        return id;
    };
    Downloader.prototype.start = function (id, progress) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (id && _this.downloads.has(id)) {
                var data = _this.downloadsData.get(id);
                _this.downloadsData.set(id, Object.assign({}, data, {
                    reject: reject,
                    resolve: resolve,
                    callback: progress
                }));
                var task = _this.downloads.get(id);
                if (task) {
                    task.resume();
                }
            }
            else {
                reject({ message: 'Download ID not found.' });
            }
        });
    };
    Downloader.prototype.getStatus = function (id) {
        if (id && this.downloads.has(id)) {
            var download = this.downloadsData.get(id);
            return download.status;
        }
        return downloader_common_1.StatusCode.PENDING;
    };
    Downloader.prototype.pause = function (id) {
        if (id && this.downloads.has(id)) {
            var task = this.downloads.get(id);
            if (task) {
                task.suspend();
                var data = this.downloadsData.get(id);
                if (data) {
                    this.downloadsData.set(id, Object.assign({}, data, {
                        status: downloader_common_1.StatusCode.PAUSED
                    }));
                }
            }
        }
    };
    Downloader.prototype.resume = function (id) {
        if (id && this.downloads.has(id)) {
            var task = this.downloads.get(id);
            if (task) {
                task.resume();
            }
        }
    };
    Downloader.prototype.cancel = function (id) {
        if (id && this.downloads.has(id)) {
            var task = this.downloads.get(id);
            if (task) {
                task.cancel();
            }
        }
    };
    Downloader.prototype.getPath = function (id) {
        if (id && this.downloadsData.has(id)) {
            var data = this.downloadsData.get(id);
            if (data) {
                return data.path;
            }
            return null;
        }
        return null;
    };
    return Downloader;
}(downloader_common_1.DownloaderBase));
exports.Downloader = Downloader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWRlci5pb3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkb3dubG9hZGVyLmlvcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlEQU82QjtBQUM3QixpREFBbUQ7QUFDbkQsSUFBTSxVQUFVLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztBQUNoRCw4RUFBOEU7QUFDOUU7SUFBZ0MsOEJBQWM7SUFDN0M7UUFBQSxZQUNDLGlCQUFPLFNBR1A7UUFGQSxLQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDM0IsS0FBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDOztJQUNoQyxDQUFDO0lBQ2EsZUFBSSxHQUFsQixjQUFzQixDQUFDO0lBQ2hCLG1DQUFjLEdBQXJCLFVBQXNCLE9BQXdCO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVELElBQU0sRUFBRSxHQUFHLDhCQUFVLEVBQUUsQ0FBQztRQUN4QixJQUFNLGFBQWEsR0FBRyx5QkFBeUIsQ0FBQywyQkFBMkIsQ0FBQztRQUM1RSxJQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQyw0QkFBNEIsQ0FDeEUsYUFBYSxDQUNiLENBQUM7UUFFRixJQUFJLEdBQUcsQ0FBQztRQUNSLElBQUksS0FBSyxDQUFDO1FBQ1YsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbkIsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM3QyxLQUFLLEdBQUcsRUFBRSxDQUFDO2dC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LFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDVixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZixDQUFDO1FBQ0YsQ0FBQztJQUNGLENBQUM7SUFFTSwyQkFBTSxHQUFiLFVBQWMsRUFBVTtRQUN2QixFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2YsQ0FBQztRQUNGLENBQUM7SUFDRixDQUFDO0lBRU0sNEJBQU8sR0FBZCxVQUFlLEVBQVU7UUFDeEIsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2xCLENBQUM7WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2IsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDYixDQUFDO0lBQ0YsaUJBQUM7QUFBRCxDQUFDLEFBek9ELENBQWdDLGtDQUFjLEdBeU83QztBQXpPWSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdERvd25sb2FkZXJCYXNlLFxuXHREb3dubG9hZE9wdGlvbnMsXG5cdERvd25sb2FkRXZlbnREYXRhLFxuXHRTdGF0dXNDb2RlLFxuXHRQcm9ncmVzc0V2ZW50RGF0YSxcblx0Z2VuZXJhdGVJZFxufSBmcm9tICcuL2Rvd25sb2FkZXIuY29tbW9uJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvZmlsZS1zeXN0ZW0nO1xuY29uc3QgbWFpbl9xdWV1ZSA9IGRpc3BhdGNoX2dldF9jdXJyZW50X3F1ZXVlKCk7XG4vLyBkZWNsYXJlIGNvbnN0IEFGVVJMU2Vzc2lvbk1hbmFnZXIsIE5TVVJMU2Vzc2lvbkNvbmZpZ3VyYXRpb24sIE5TVVJMUmVxdWVzdDtcbmV4cG9ydCBjbGFzcyBEb3dubG9hZGVyIGV4dGVuZHMgRG93bmxvYWRlckJhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuZG93bmxvYWRzID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMuZG93bmxvYWRzRGF0YSA9IG5ldyBNYXAoKTtcblx0fVxuXHRwdWJsaWMgc3RhdGljIGluaXQoKSB7fVxuXHRwdWJsaWMgY3JlYXRlRG93bmxvYWQob3B0aW9uczogRG93bmxvYWRPcHRpb25zKTogc3RyaW5nIHtcblx0XHRpZiAob3B0aW9ucyAmJiAhb3B0aW9ucy51cmwpIHRocm93IG5ldyBFcnJvcignVXJsIG1pc3NpbmcnKTtcblx0XHRjb25zdCBpZCA9IGdlbmVyYXRlSWQoKTtcblx0XHRjb25zdCBjb25maWd1cmF0aW9uID0gTlNVUkxTZXNzaW9uQ29uZmlndXJhdGlvbi5kZWZhdWx0U2Vzc2lvbkNvbmZpZ3VyYXRpb247XG5cdFx0Y29uc3QgZG93bmxvYWQgPSBBRlVSTFNlc3Npb25NYW5hZ2VyLmFsbG9jKCkuaW5pdFdpdGhTZXNzaW9uQ29uZmlndXJhdGlvbihcblx0XHRcdGNvbmZpZ3VyYXRpb25cblx0XHQpO1xuXG5cdFx0bGV0IHVybDtcblx0XHRsZXQgcXVlcnk7XG5cdFx0aWYgKG9wdGlvbnMucXVlcnkpIHtcblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5xdWVyeSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Y29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMob3B0aW9ucy5xdWVyeSk7XG5cdFx0XHRcdHF1ZXJ5ID0gJyc7XG5cdFx0XHRcdGZvciAobGV0IGtleSBvZiBrZXlzQXJyYXkpIHtcblx0XHRcdFx0XHRxdWVyeSArPSBrZXkgKyAnPScgKyBvcHRpb25zLnF1ZXJ5W2tleV0gKyAnJic7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMucXVlcnkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHF1ZXJ5ID0gb3B0aW9ucy5xdWVyeTtcblx0XHRcdH1cblx0XHRcdHVybCA9IGVuY29kZVVSSShvcHRpb25zLnVybCArIHF1ZXJ5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dXJsID0gb3B0aW9ucy51cmw7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVxdWVzdCA9IE5TVVJMUmVxdWVzdC5yZXF1ZXN0V2l0aFVSTChOU1VSTC5VUkxXaXRoU3RyaW5nKHVybCkpO1xuXG5cdFx0bGV0IHBhdGggPSAnJztcblx0XHRpZiAob3B0aW9ucy5wYXRoICYmIG9wdGlvbnMuZmlsZU5hbWUpIHtcblx0XHRcdHBhdGggPSBmcy5wYXRoLmpvaW4ob3B0aW9ucy5wYXRoLCBvcHRpb25zLmZpbGVOYW1lKTtcblx0XHR9IGVsc2UgaWYgKCFvcHRpb25zLnBhdGggJiYgb3B0aW9ucy5maWxlTmFtZSkge1xuXHRcdFx0cGF0aCA9IGZzLnBhdGguam9pbihmcy5rbm93bkZvbGRlcnMudGVtcCgpLnBhdGgsIG9wdGlvbnMuZmlsZU5hbWUpO1xuXHRcdH0gZWxzZSBpZiAob3B0aW9ucy5wYXRoICYmICFvcHRpb25zLmZpbGVOYW1lKSB7XG5cdFx0XHRwYXRoID0gZnMucGF0aC5qb2luKG9wdGlvbnMucGF0aCwgYCR7Z2VuZXJhdGVJZCgpfWApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwYXRoID0gZnMucGF0aC5qb2luKGZzLmtub3duRm9sZGVycy50ZW1wKCkucGF0aCwgYCR7Z2VuZXJhdGVJZCgpfWApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlZiA9IG5ldyBXZWFrUmVmKHRoaXMpO1xuXHRcdGxldCBsYXN0UmVmcmVzaFRpbWUgPSAwO1xuXHRcdGxldCBsYXN0Qnl0ZXNXcml0dGVuID0gMDtcblx0XHRjb25zdCB0YXNrID0gZG93bmxvYWQuZG93bmxvYWRUYXNrV2l0aFJlcXVlc3RQcm9ncmVzc0Rlc3RpbmF0aW9uQ29tcGxldGlvbkhhbmRsZXIoXG5cdFx0XHRyZXF1ZXN0LFxuXHRcdFx0cHJvZ3Jlc3MgPT4ge1xuXHRcdFx0XHRkaXNwYXRjaF9hc3luYyhtYWluX3F1ZXVlLCAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3Qgb3duZXIgPSByZWYuZ2V0KCk7XG5cdFx0XHRcdFx0aWYgKHRhc2sgJiYgdGFzay5zdGF0ZSA9PT0gTlNVUkxTZXNzaW9uVGFza1N0YXRlLlJ1bm5pbmcpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnQgPSBNYXRoLmZsb29yKFxuXHRcdFx0XHRcdFx0XHRNYXRoLnJvdW5kKHByb2dyZXNzLmZyYWN0aW9uQ29tcGxldGVkICogMTAwKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGlmIChvd25lci5kb3dubG9hZHNEYXRhLmhhcyhpZCkpIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZGF0YSA9IG93bmVyLmRvd25sb2Fkc0RhdGEuZ2V0KGlkKTtcblx0XHRcdFx0XHRcdFx0aWYgKGRhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGF0YS5zdGF0dXMgJiYgZGF0YS5zdGF0dXMgIT09IFN0YXR1c0NvZGUuRE9XTkxPQURJTkcpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG93bmVyLmRvd25sb2Fkc0RhdGEuc2V0KFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0T2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1czogU3RhdHVzQ29kZS5ET1dOTE9BRElOR1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2sgPSBkYXRhLmNhbGxiYWNrO1xuXHRcdFx0XHRcdFx0XHRsZXQgc3BlZWQ7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRCeXRlcyA9IHRhc2suY291bnRPZkJ5dGVzUmVjZWl2ZWQ7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHRvdGFsQnl0ZXMgPSBwcm9ncmVzcy50b3RhbFVuaXRDb3VudDtcblx0XHRcdFx0XHRcdFx0bGV0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdFx0XHRcdFx0bGV0IG1pblRpbWUgPSAxMDA7XG5cblx0XHRcdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRUaW1lIC0gbGFzdFJlZnJlc2hUaW1lID49IG1pblRpbWUgfHxcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50Qnl0ZXMgPT09IHRvdGFsQnl0ZXNcblx0XHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IGludGVydmFsVGltZSA9IGN1cnJlbnRUaW1lIC0gbGFzdFJlZnJlc2hUaW1lO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChpbnRlcnZhbFRpbWUgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGludGVydmFsVGltZSArPSAxO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjb25zdCB1cGRhdGVCeXRlcyA9IGN1cnJlbnRCeXRlcyAtIGxhc3RCeXRlc1dyaXR0ZW47XG5cdFx0XHRcdFx0XHRcdFx0c3BlZWQgPSBNYXRoLmZsb29yKE1hdGgucm91bmQodXBkYXRlQnl0ZXMgLyBpbnRlcnZhbFRpbWUpKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrKDxQcm9ncmVzc0V2ZW50RGF0YT57XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlOiBjdXJyZW50LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzcGVlZDogc3BlZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRTaXplOiBjdXJyZW50Qnl0ZXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRvdGFsU2l6ZTogcHJvZ3Jlc3MudG90YWxVbml0Q291bnRcblx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGxhc3RSZWZyZXNoVGltZSA9IERhdGUubm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0bGFzdEJ5dGVzV3JpdHRlbiA9IGN1cnJlbnRCeXRlcztcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0YXNrLnN0YXRlID09PSBOU1VSTFNlc3Npb25UYXNrU3RhdGUuU3VzcGVuZGVkKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBkYXRhID0gb3duZXIuZG93bmxvYWRzRGF0YS5nZXQoaWQpO1xuXHRcdFx0XHRcdFx0aWYgKGRhdGEpIHtcblx0XHRcdFx0XHRcdFx0b3duZXIuZG93bmxvYWRzRGF0YS5zZXQoXG5cdFx0XHRcdFx0XHRcdFx0aWQsXG5cdFx0XHRcdFx0XHRcdFx0T2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzOiBTdGF0dXNDb2RlLlBBVVNFRFxuXHRcdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0XHQodGFyZ2V0UGF0aCwgcmVzcG9uc2UpID0+IHtcblx0XHRcdFx0Y29uc3Qgb3duZXIgPSByZWYuZ2V0KCk7XG5cdFx0XHRcdHJldHVybiBOU1VSTC5maWxlVVJMV2l0aFBhdGgocGF0aCk7XG5cdFx0XHR9LFxuXHRcdFx0KHJlc3BvbnNlLCBmaWxlUGF0aCwgZXJyb3IpID0+IHtcblx0XHRcdFx0Y29uc3Qgb3duZXIgPSByZWYuZ2V0KCk7XG5cdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdGlmIChvd25lci5kb3dubG9hZHNEYXRhLmhhcyhpZCkpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBvd25lci5kb3dubG9hZHNEYXRhLmdldChpZCk7XG5cdFx0XHRcdFx0XHRjb25zdCByZWplY3QgPSBkYXRhLnJlamVjdDtcblx0XHRcdFx0XHRcdHJlamVjdCh7XG5cdFx0XHRcdFx0XHRcdHN0YXR1czogU3RhdHVzQ29kZS5FUlJPUixcblx0XHRcdFx0XHRcdFx0bWVzc2FnZTogZXJyb3IubG9jYWxpemVkRGVzY3JpcHRpb25cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHR0YXNrICYmXG5cdFx0XHRcdFx0XHR0YXNrLnN0YXRlID09PSBOU1VSTFNlc3Npb25UYXNrU3RhdGUuQ29tcGxldGVkICYmXG5cdFx0XHRcdFx0XHQhdGFzay5lcnJvclxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0aWYgKG93bmVyLmRvd25sb2Fkc0RhdGEuaGFzKGlkKSkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBkYXRhID0gb3duZXIuZG93bmxvYWRzRGF0YS5nZXQoaWQpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCByZXNvbHZlID0gZGF0YS5yZXNvbHZlO1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKDxEb3dubG9hZEV2ZW50RGF0YT57XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzOiBTdGF0dXNDb2RlLkNPTVBMRVRFRCxcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiBudWxsLFxuXHRcdFx0XHRcdFx0XHRcdHBhdGg6IGRhdGEucGF0aFxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHRcdHRoaXMuZG93bmxvYWRzLnNldChpZCwgdGFzayk7XG5cblx0XHR0aGlzLmRvd25sb2Fkc0RhdGEuc2V0KGlkLCB7XG5cdFx0XHRzdGF0dXM6IFN0YXR1c0NvZGUuUEVORElORyxcblx0XHRcdHBhdGg6IHBhdGhcblx0XHR9KTtcblx0XHRyZXR1cm4gaWQ7XG5cdH1cblxuXHRwdWJsaWMgc3RhcnQoaWQ6IHN0cmluZywgcHJvZ3Jlc3M/OiBGdW5jdGlvbik6IFByb21pc2U8RG93bmxvYWRFdmVudERhdGE+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0aWYgKGlkICYmIHRoaXMuZG93bmxvYWRzLmhhcyhpZCkpIHtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IHRoaXMuZG93bmxvYWRzRGF0YS5nZXQoaWQpO1xuXHRcdFx0XHR0aGlzLmRvd25sb2Fkc0RhdGEuc2V0KFxuXHRcdFx0XHRcdGlkLFxuXHRcdFx0XHRcdE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcblx0XHRcdFx0XHRcdHJlamVjdDogcmVqZWN0LFxuXHRcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcblx0XHRcdFx0XHRcdGNhbGxiYWNrOiBwcm9ncmVzc1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGNvbnN0IHRhc2sgPSB0aGlzLmRvd25sb2Fkcy5nZXQoaWQpO1xuXHRcdFx0XHRpZiAodGFzaykge1xuXHRcdFx0XHRcdHRhc2sucmVzdW1lKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlamVjdCh7IG1lc3NhZ2U6ICdEb3dubG9hZCBJRCBub3QgZm91bmQuJyB9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyBnZXRTdGF0dXMoaWQ6IHN0cmluZyk6IFN0YXR1c0NvZGUge1xuXHRcdGlmIChpZCAmJiB0aGlzLmRvd25sb2Fkcy5oYXMoaWQpKSB7XG5cdFx0XHRjb25zdCBkb3dubG9hZCA9IHRoaXMuZG93bmxvYWRzRGF0YS5nZXQoaWQpO1xuXHRcdFx0cmV0dXJuIGRvd25sb2FkLnN0YXR1cztcblx0XHR9XG5cdFx0cmV0dXJuIFN0YXR1c0NvZGUuUEVORElORztcblx0fVxuXG5cdHB1YmxpYyBwYXVzZShpZDogc3RyaW5nKSB7XG5cdFx0aWYgKGlkICYmIHRoaXMuZG93bmxvYWRzLmhhcyhpZCkpIHtcblx0XHRcdGNvbnN0IHRhc2sgPSB0aGlzLmRvd25sb2Fkcy5nZXQoaWQpO1xuXHRcdFx0aWYgKHRhc2spIHtcblx0XHRcdFx0dGFzay5zdXNwZW5kKCk7XG5cdFx0XHRcdGNvbnN0IGRhdGEgPSB0aGlzLmRvd25sb2Fkc0RhdGEuZ2V0KGlkKTtcblx0XHRcdFx0aWYgKGRhdGEpIHtcblx0XHRcdFx0XHR0aGlzLmRvd25sb2Fkc0RhdGEuc2V0KFxuXHRcdFx0XHRcdFx0aWQsXG5cdFx0XHRcdFx0XHRPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG5cdFx0XHRcdFx0XHRcdHN0YXR1czogU3RhdHVzQ29kZS5QQVVTRURcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyByZXN1bWUoaWQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmIChpZCAmJiB0aGlzLmRvd25sb2Fkcy5oYXMoaWQpKSB7XG5cdFx0XHRjb25zdCB0YXNrID0gdGhpcy5kb3dubG9hZHMuZ2V0KGlkKTtcblx0XHRcdGlmICh0YXNrKSB7XG5cdFx0XHRcdHRhc2sucmVzdW1lKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGNhbmNlbChpZDogc3RyaW5nKTogdm9pZCB7XG5cdFx0aWYgKGlkICYmIHRoaXMuZG93bmxvYWRzLmhhcyhpZCkpIHtcblx0XHRcdGNvbnN0IHRhc2sgPSB0aGlzLmRvd25sb2Fkcy5nZXQoaWQpO1xuXHRcdFx0aWYgKHRhc2spIHtcblx0XHRcdFx0dGFzay5jYW5jZWwoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZ2V0UGF0aChpZDogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRpZiAoaWQgJiYgdGhpcy5kb3dubG9hZHNEYXRhLmhhcyhpZCkpIHtcblx0XHRcdGNvbnN0IGRhdGEgPSB0aGlzLmRvd25sb2Fkc0RhdGEuZ2V0KGlkKTtcblx0XHRcdGlmIChkYXRhKSB7XG5cdFx0XHRcdHJldHVybiBkYXRhLnBhdGg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn0iXX0=